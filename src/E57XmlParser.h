/*
 * Original work Copyright 2009 - 2010 Kevin Ackley (kackley@gwi.net)
 * Modified work Copyright 2018 - 2020 Andy Maloney <asmaloney@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

#include <map>
#include <stack>

#include "Common.h"

namespace e57
{
   class CheckedFile;

   class E57XmlInputSource;
   class E57XmlParserImpl;
   class E57XmlProcessor;

   class E57XmlParser
   {
   public:
      explicit E57XmlParser( ImageFileImplSharedPtr imf );
      ~E57XmlParser();

      void init();

      void parse( E57XmlInputSource &inputSource );

   private:
      ImageFileImplSharedPtr imf_; /// Image file we are reading

      std::unique_ptr<E57XmlParserImpl> impl_;
   };

   class E57XmlParserImpl
   {
   public:
      virtual ~E57XmlParserImpl() = default;

      virtual void init() = 0;
      virtual void parse( E57XmlInputSource &inputSource, E57XmlProcessor &processor ) = 0;

      static std::unique_ptr<E57XmlParserImpl> create();
   };

   class E57XmlProcessor
   {
   public:
      class AttributeMap
      {
      public:
         virtual ~AttributeMap() = default;

         virtual size_t length() const = 0;
         virtual ustring getQName( size_t index ) const = 0;
         virtual ustring getValue( size_t index ) const = 0;

         virtual bool contains( const ustring &qName ) const = 0;
         virtual ustring lookup( const ustring &qName ) const = 0;
      };

      void startNamespaceDecl( const ustring &prefix, const ustring &uri );
      void startElement( const ustring &qName, const AttributeMap &attributes );
      void endElement( const ustring &qName );
      void text( const ustring &text );

   private:
      friend class E57XmlParser;
      explicit E57XmlProcessor( ImageFileImplSharedPtr imf );

      ImageFileImplSharedPtr imf_; /// Image file we are reading

      struct ParseInfo
      {
         // All the fields need to remember while parsing the XML
         // Not all fields are used at same time, depends on node type
         // Needed because not all info is available at one time to create the
         // node.
         NodeType nodeType;               // used by all types
         int64_t minimum;                 // used in Integer, ScaledInteger
         int64_t maximum;                 // used in Integer, ScaledInteger
         double scale;                    // used in ScaledInteger
         double offset;                   // used in ScaledInteger
         FloatPrecision precision;        // used in Float
         double floatMinimum;             // used in Float
         double floatMaximum;             // used in Float
         int64_t fileOffset;              // used in Blob, CompressedVector
         int64_t length;                  // used in Blob
         bool allowHeterogeneousChildren; // used in Vector
         int64_t recordCount;             // used in CompressedVector
         ustring childText; // used by all types, accumulates all child text between tags

         // Holds node for Structure, Vector, and CompressedVector so can append
         // child elements
         NodeImplSharedPtr container_ni;

         ParseInfo(); // default ctor
         void dump( int indent = 0, std::ostream &os = std::cout ) const;
      };

      std::stack<ParseInfo> stack_; /// Stores the current path in tree we are reading

      std::map<ustring, ustring> namespaceDecls_;
   };

   class E57XmlInputSource
   {
   public:
      virtual ~E57XmlInputSource() = default;

      virtual uint64_t length() const = 0;
      virtual uint64_t curPos() const = 0;

      virtual size_t readBytes( unsigned char *toFill, size_t maxToRead ) = 0;
   };

   class E57XmlFileInputSource final : public E57XmlInputSource
   {
   public:
      E57XmlFileInputSource( CheckedFile *cf, uint64_t logicalStart, uint64_t logicalLength );

      uint64_t length() const override;
      uint64_t curPos() const override;

      size_t readBytes( unsigned char *toFill, size_t maxToRead ) override;

   private:
      //??? lifetime of cf_ must be longer than this object!
      CheckedFile *cf_;
      uint64_t logicalStart_;
      uint64_t logicalLength_;
      uint64_t logicalPosition_;
   };
}
